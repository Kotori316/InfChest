buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

version = getProperty("modversion")
group = "com.kotori316"
archivesBaseName = "InfChest"

sourceCompatibility = targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20190522-1.13.2'

    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('Minecraft')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                quarryplus {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                quarryplus {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'scala'
        }
        resources {
            srcDir 'resources'
        }
    }
}

repositories {
    maven {
        name "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "Hwyla"
        url "http://tehnut.info/maven"
    }
    maven { // The One Probe
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.13.2-25.0.219'
    //deobfCompile "com.mod-buildcraft:buildcraft:7.99.17"
//    deobfCompile "appeng:appliedenergistics2:rv6-stable-6"
//    deobfCompile "mcp.mobius.waila:Hwyla:1.8.26-B41_1.12.2"
//    deobfCompile "mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.4.23-16"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

/*
task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.hasProperty('keyStore') ? project.getProperty("keyStore") : ""
    alias = project.hasProperty('keyStore') ? project.getProperty('keyStoreAlias') : ""
    storePass = project.hasProperty('keyStore') ? project.getProperty('keyStorePass') : ""
    keyPass = project.hasProperty('keyStore') ? project.getProperty('keyStoreKeyPass') : ""
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}*/
// Runs this task automatically when build is ran.
//build.dependsOn signJar

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}
/*
curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '312222'
        changelogType = 'markdown'
        changelog = new File("temp_changelog.md")
        releaseType = 'release'
        mainArtifact jar
        addArtifact srcJar
        addArtifact deobfJar
        afterEvaluate {
            gameVersionStrings.remove('Java 8')
            gameVersionStrings.remove('Java 9')
        }
    }
}
*/