import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id("maven-publish")
    id "com.matthewprenger.cursegradle" version "1.4.0"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: "com.matthewprenger.cursegradle"

version = getProperty("modVersion")
group = "com.kotori316"
archivesBaseName = "InfChest"

sourceCompatibility = targetCompatibility = '1.8'

static String MappingVersion() { return '20201028-1.16.3' }

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'snapshot', version: MappingVersion()

    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('Minecraft')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                quarryplus {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                quarryplus {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'scala'
        }
        resources {
            srcDir 'resources'
        }
    }
}

repositories {
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev/"
    }
    maven {
        name = "Hwyla"
        url "https://maven.tehnut.info"
        content {
            it.includeGroup("mcp.mobius.waila")
        }
    }
    maven { // The One Probe
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
        content {
            includeGroup("mcjty.theoneprobe")
        }
    }
    maven {
        url = "https://www.cursemaven.com"
        content {
            it.includeGroup("curse.maven")
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.46'
    //deobfCompile "com.mod-buildcraft:buildcraft:7.99.17"
    compileOnly fg.deobf("appeng:appliedenergistics2:8.2.0")
    implementation fg.deobf("mcp.mobius.waila:Hwyla:1.10.11-B78_1.16.2")
    implementation fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.0.4-beta-7")
    implementation fg.deobf("curse.maven:storagebox-mod-419839:3119354")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

task signJar2() {
    doLast {
        ant.signjar(
                jar: jar.archivePath,
                alias: project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : "",
                keystore: project.hasProperty('keyStore') ? project.getProperty("keyStore") : "",
                storepass: project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : "",
                sigalg: "SHA1withRSA",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com"
        )
        ant.signjar(
                jar: deobfJar.archivePath,
                alias: project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : "",
                keystore: project.hasProperty('keyStore') ? project.getProperty("keyStore") : "",
                storepass: project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : "",
                sigalg: "SHA1withRSA",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com"
        )
    }
}
// Runs this task automatically when build is ran.
assemble.dependsOn(signJar2)

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '312222'
        changelogType = 'markdown'
        changelog = new File("temp_changelog.md")
        addGameVersion '1.16.4'
        addGameVersion '1.16.5'
        releaseType = 'release'
        mainArtifact jar
        addArtifact srcJar
        addArtifact deobfJar
    }
    options {
        debug = false // defaults to false
        javaVersionAutoDetect = false
    }
}

publishing {
    repositories {
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = "InfChest".toLowerCase()
            artifact srcJar {
                archiveClassifier.set('sources')
                extension = 'jar'
            }
            artifact deobfJar {
                archiveClassifier.set('deobf')
                extension = 'jar'
            }
            artifact reobfArtifact
        }
    }
}

task copyToDrive(type: Copy, dependsOn: "build") {
    def PATH_NAME = "drive_path"
    from(jar.getArchiveFile(), deobfJar.getArchiveFile(), srcJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}
