import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
plugins {
    id("maven-publish")
    id 'net.minecraftforge.gradle' version '5.+'
    id "com.matthewprenger.cursegradle" version "1.4.0"
}
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = getProperty("modVersion")
group = "com.kotori316"
archivesBaseName = "InfChest"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'parchment', version: ((project.parchmentMapping + "-" + project.minecraftVersion) as String)
    // mappings channel: 'official', version: (project.minecraftVersion as String)

    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('Minecraft')

            property('mixin.env.remapRefMap', 'true')
            property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
            property("mixin.debug.export", "true")
            property('forge.logging.console.level', 'debug')
            // Recommended logging data for a userdev environment
            property('forge.logging.markers', 'REGISTRIES')

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            forceExit false

            mods {
                infchest {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            property('mixin.env.remapRefMap', 'true')
            property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
            property("mixin.debug.export", "true")
            property('forge.logging.console.level', 'debug')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            forceExit false

            mods {
                infchest {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'scala'
        }
        resources {
            srcDir 'resources'
        }
    }
}

repositories {
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev/"
        content {
            it.includeModule("appeng", "appliedenergistics2")
        }
    }
    maven {
        url = "https://www.cursemaven.com"
        content {
            it.includeGroup("curse.maven")
        }
    }
    maven {
        name = "What The Hell Is That"
        url = "https://maven.bai.lol"
        content {
            it.includeModule("mcp.mobius.waila", "wthit-api")
            it.includeModule("mcp.mobius.waila", "wthit")
            it.includeModule("lol.bai", "badpackets")
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19-41.0.30'
    //deobfCompile "com.mod-buildcraft:buildcraft:7.99.17"
    compileOnly(fg.deobf("appeng:appliedenergistics2:${project.ae2Version}"))
    implementation(fg.deobf("curse.maven:jade-324717:${project.jade_id}"))
    implementation(fg.deobf("curse.maven:the-one-probe-245211:${project.top_id}"))
    compileOnly(fg.deobf("mcp.mobius.waila:wthit-api:forge-${project.wthit_version}"))
    // runtimeOnly(fg.deobf("mcp.mobius.waila:wthit:forge-${project.wthit_version}"))
    // runtimeOnly(fg.deobf("lol.bai:badpackets:forge-${project.badpackets_version}"))
    // implementation fg.deobf("curse.maven:StorageBox-mod-419839:3430254".toLowerCase())
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion.get(),
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
                'Automatic-Module-Name'   : 'infchest',
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

//task signJar(type: SignJar, dependsOn: 'reobfJar') {
//    boolean executeCondition = project.hasProperty('keyStoreAlias') &&
//            project.hasProperty('keyStore') &&
//            project.hasProperty('keyStorePass')
//    onlyIf { executeCondition }
//    if (executeCondition) {
//        keyStore = project.getProperty("keyStore")
//        alias = project.getProperty('keyStoreAlias')
//        storePass = project.getProperty('keyStorePass')
//        keyPass = ""
//    }
//
//    inputFile = jar.getArchiveFile().get()
//    outputFile = jar.getArchiveFile().get()
//}
//// Runs this task automatically when build is ran.
//assemble.dependsOn(signJar)

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set('deobf')
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '312222'
        changelogType = 'markdown'
        changelog = new File("temp_changelog.md")
        addGameVersion(project.minecraftVersion as String)
        addGameVersion 'Forge'
        releaseType = 'release'
        mainArtifact jar
        addArtifact srcJar
        addArtifact deobfJar
    }
    options {
        curseGradleOptions.debug = false // defaults to false
        javaVersionAutoDetect = false
    }
}

publishing {
    repositories {
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = "InfChest".toLowerCase()
            artifact srcJar {
                archiveClassifier.set('sources')
                archiveExtension.set('jar')
            }
            artifact deobfJar {
                archiveClassifier.set('deobf')
                archiveExtension.set('jar')
            }
            artifact reobfArtifact
        }
    }
}

task copyToDrive(type: Copy, dependsOn: "build") {
    def PATH_NAME = "drive_path"
    from(jar.getArchiveFile(), deobfJar.getArchiveFile(), srcJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}
