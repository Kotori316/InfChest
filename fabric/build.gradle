import java.nio.file.Files
import java.nio.file.Paths

plugins {
    // https://maven.fabricmc.net/net/fabricmc/fabric-loom/
    id "fabric-loom" version "0.13-SNAPSHOT"
    id 'maven-publish'
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

archivesBaseName = "${rootProject.name}-Fabric-${project.minecraftVersion}"
version = project.modVersion
group = "com.kotori316"

println("Java: " + System.getProperty("java.version") +
        " JVM: " + System.getProperty("java.vm.version") +
        "(" + System.getProperty("java.vendor") + ")" +
        " Arch: " + System.getProperty("os.arch"))

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        name = "What The Hell Is That"
        url = "https://maven.bai.lol"
        content {
            it.includeVersion("mcp.mobius.waila", "wthit-api", "fabric-${project.wthit_fabric_version}")
            it.includeVersion("mcp.mobius.waila", "wthit", "fabric-${project.wthit_fabric_version}")
            it.includeVersion("lol.bai", "badpackets", "fabric-${project.badpackets_fabric_version}")
        }
    }
    maven {
        url = "https://www.cursemaven.com"
        content {
            it.includeGroup("curse.maven")
        }
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev/"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraftVersion}"
    mappings loom.layered {
        it.officialMojangMappings()
        String[] parchmentVersion = String.valueOf(project.parchmentMapping).split("-")
        String parchmentMC = parchmentVersion[0]
        String parchmentDate = parchmentVersion[1]
        it.parchment("org.parchmentmc.data:parchment-$parchmentMC:$parchmentDate@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    compileOnly project(":common")

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modCompileOnly("appeng:appliedenergistics2-fabric:${project.ae2_fabric_version}") {
        transitive(false)
    }
    //noinspection SpellCheckingInspection
    // modRuntimeOnly("teamreborn:energy:2.2.0") // For AE2
    modCompileOnly("mcp.mobius.waila:wthit-api:fabric-${project.wthit_fabric_version}")
    // modRuntimeOnly("mcp.mobius.waila:wthit:fabric-${project.wthit_fabric_version}")
    // modRuntimeOnly("lol.bai:badpackets:fabric-${project.badpackets_fabric_version}")
    modCompileOnly("curse.maven:jade-324717:${project.jade_fabric_id}")
}

processResources {
    from project(":common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    source(project(":common").sourceSets.main.allSource)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '312222'
        changelogType = 'markdown'
        changelog = file("temp_changelog.md")
        addGameVersion 'Fabric'
        addGameVersion project.minecraftVersion
        releaseType = 'beta'
        mainArtifact remapJar
    }
    options {
        curseGradleOptions.debug = false
        curseGradleOptions.javaVersionAutoDetect = false
        curseGradleOptions.forgeGradleIntegration = false
    }
}

publishing {
    repositories {
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archivesBaseName.toLowerCase()
            from components.java
        }
    }
}

tasks.register('checkOutput') {
    doLast {
        [remapJar, jar, sourcesJar].forEach { t ->
            println("$t -> ${t.getArchiveFile().get().asFile}")
        }
        println("$remapSourcesJar -> ${remapSourcesJar.output}")
    }
}

tasks.register('copyToDrive', Copy) {
    dependsOn("build")
    def PATH_NAME = "drive_path"
    from(remapJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}
