import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import com.kotori316.plugin.cf.CallVersionCheckFunctionTask
import com.kotori316.plugin.cf.CallVersionFunctionTask

plugins {
    id("maven-publish")
    id("signing")
    id("java")
    id("net.minecraftforge.gradle") version("[6.0,6.2)")
    id("org.spongepowered.mixin") version("0.7.+")
    id("org.parchmentmc.librarian.forgegradle") version("1.+")
    id("com.matthewprenger.cursegradle") version("1.4.0")
    id("com.modrinth.minotaur").version("2.+")
    id("com.kotori316.plugin.cf") version("2.+")
}

version = project.modVersion
group = "com.kotori316" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${project.baseName}-Forge-${project.minecraftVersion}"
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println("Java: " + System.getProperty("java.version") +
        " JVM: " + System.getProperty("java.vm.version") +
        "(" + System.getProperty("java.vendor") + ")" +
        " Arch: " + System.getProperty("os.arch"))

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "parchment", version: ("${project.parchmentMapping}-${project.minecraftVersion}" as String)
    // mappings channel: "official", version: "1.18.2"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            setWorkingDirectory("run")

            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")
            property("mixin.debug.export", "true")
            property("terminal.ansi", "true")

            mods {
                create(project.mod_id as String) {
                    source(sourceSets.main as SourceSet)
                    source(project(":common").sourceSets.main as SourceSet)
                }
            }
        }

        server {
            setWorkingDirectory("run")

            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")
            property("mixin.debug.export", "true")
            property("terminal.ansi", "true")

            mods {
                create(project.mod_id as String) {
                    source(sourceSets.main as SourceSet)
                    source(project(":common").sourceSets.main as SourceSet)
                }
            }
        }

        data {
            setWorkingDirectory("run")

            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")
            property("mixin.debug.export", "true")
            property("terminal.ansi", "true")

            args "--mod", project.mod_id, "--all", "--output", file("src/generated/resources/")

            mods {
                create(project.mod_id as String) {
                    source(sourceSets.main as SourceSet)
                    source(project(":common").sourceSets.main as SourceSet)
                }
            }
        }
    }
}

processResources {
    from project(":common").sourceSets.main.resources
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev/"
        content {
            it.includeModule("appeng", "appliedenergistics2-forge")
        }
    }
    maven {
        url = "https://www.cursemaven.com"
        content {
            it.includeGroup("curse.maven")
        }
    }
    maven {
        name = "What The Hell Is That"
        url = "https://maven2.bai.lol"
        content {
            it.includeModule("mcp.mobius.waila", "wthit-api")
            it.includeModule("mcp.mobius.waila", "wthit")
            it.includeModule("lol.bai", "badpackets")
        }
    }
    maven {
        name = "Mixin"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        url = uri("https://maven.pkg.github.com/refinedmods/refinedstorage")
        credentials {
            username = "anything"
            password = "\u0067hp_oGjcDFCn8jeTzIj4Ke9pLoEVtpnZMP4VQgaX"
        }
        content {
            includeGroup("com.refinedmods")
        }
    }
}

dependencies {
    minecraft("net.minecraftforge:forge:${project.forgeVersion}")
    compileOnly project(":common")
    testCompileOnly project(":common")
    // Mixin
    annotationProcessor("org.spongepowered:mixin:0.8.5:processor")

    compileOnly(fg.deobf("appeng:appliedenergistics2-forge:${project.ae2Version}"))
    compileOnly(fg.deobf("com.refinedmods:refinedstorage:${project.rsVersion}") { transitive = false })
    implementation(fg.deobf("curse.maven:jade-324717:${project.jade_forge_id}"))
    implementation(fg.deobf("curse.maven:the-one-probe-245211:${project.top_id}"))
    compileOnly(fg.deobf("mcp.mobius.waila:wthit-api:forge-${project.wthit_forge_version}"))
    // runtimeOnly(fg.deobf("mcp.mobius.waila:wthit:forge-${project.wthit_version}"))
    // runtimeOnly(fg.deobf("lol.bai:badpackets:forge-${project.badpackets_forge_version}"))
    // implementation fg.deobf("curse.maven:StorageBox-mod-419839:3430254".toLowerCase())
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

mixin {
    add sourceSets.main, "mixins.${project.mod_id}.refmap.json"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    String vendor = "Kotori316"
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : vendor,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version.toString(),
                "Implementation-Vendor"   : vendor,
                "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME),
                // "MixinConfigs"            : "${project.mod_id}.mixins.json",
                "Automatic-Module-Name"   : project.mod_id,
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add("default", reobfFile) {
    type "jar"
    builtBy "reobfJar"
}

jar.finalizedBy("jksSignJar")

tasks.register("jksSignJar") {
    dependsOn("reobfJar")
    boolean executeCondition = project.hasProperty("jarSign.keyAlias") &&
            project.hasProperty("jarSign.keyLocation") &&
            project.hasProperty("jarSign.storePass")
    onlyIf { executeCondition }
    doLast {
        //noinspection HttpUrlsUsage
        ant.signjar(
                jar: jar.archiveFile.get(),
                alias: project.findProperty("jarSign.keyAlias") ?: "",
                keystore: project.findProperty("jarSign.keyLocation") ?: "",
                storepass: project.findProperty("jarSign.storePass") ?: "",
                sigalg: "Ed25519",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com",
        )
    }
}

tasks.register('srcJar', Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set("sources")
}

tasks.register('deobfJar', Jar) {
    from sourceSets.main.output
    archiveClassifier.set("deobf")
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

curseforge {
    apiKey = project.findProperty("curseforge_additional-enchanted-miner_key") ?: System.getenv("CURSE_TOKEN") ?: ""
    project {
        id = '312222'
        changelogType = 'markdown'
        changelog = file("../temp_changelog.md")
        addGameVersion(project.minecraftVersion as String)
        addGameVersion 'Forge'
        releaseType = 'release'
        mainArtifact jar
        addArtifact srcJar
        addArtifact deobfJar
    }
    options {
        curseGradleOptions.debug = !Boolean.parseBoolean(project.releaseMode) // defaults to false
        javaVersionAutoDetect = false
    }
}

modrinth {
    token.set((project.findProperty("modrinthToken") ?: System.getenv("MODRINTH_TOKEN") ?: "") as String)
    projectId = "infchest"
    versionType = "release"
    versionName = "${project.version}-forge"
    versionNumber.set(project.version.toString())
    uploadFile = tasks.jar
    getAdditionalFiles().set([
            tasks.deobfJar,
            tasks.srcJar,
    ])
    getGameVersions().set([project.minecraftVersion])
    getLoaders().set(["forge"])
    changelog = file("../temp_changelog.md").text.split("# ")[1]
    debugMode = !Boolean.parseBoolean(project.releaseMode)
    dependencies {
    }
}

publishing {
    if (Boolean.parseBoolean(project.releaseMode)) {
        repositories {
            maven {
                name = "AzureRepository"
                url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
                credentials {
                    username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                    password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
                }
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archivesBaseName.toLowerCase()
            artifact srcJar {
                archiveClassifier.set('sources')
                archiveExtension.set('jar')
            }
            artifact deobfJar {
                archiveClassifier.set('deobf')
                archiveExtension.set('jar')
            }
            artifact reobfArtifact
        }
    }
}

tasks.register('copyToDrive', Copy) {
    dependsOn("build")
    def PATH_NAME = "drive_path"
    from(jar.getArchiveFile(), deobfJar.getArchiveFile(), srcJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}

signing {
    sign(publishing.publications)
    sign(tasks.jar, tasks.deobfJar, tasks.srcJar)
}

boolean hasGpgSignature = project.hasProperty("signing.keyId") &&
        project.hasProperty("signing.password") &&
        project.hasProperty("signing.secretKeyRingFile")

tasks.withType(Sign).configureEach {
    it.onlyIf {
        hasGpgSignature
    }
}

tasks.withType(AbstractPublishToMaven).configureEach {
    if (hasGpgSignature) {
        it.dependsOn(":forge:signJar")
        it.dependsOn(":forge:signSrcJar")
        it.dependsOn(":forge:signDeobfJar")
    }
}

tasks.register("registerVersion", CallVersionFunctionTask.class) {
    functionEndpoint = CallVersionFunctionTask.readVersionFunctionEndpoint(project)
    gameVersion = project.minecraftVersion as String
    platform = "forge"
    modName = "infchest"
    changelog = "For ${project.minecraftVersion}"
    isDryRun = false
    homepage = "https://www.curseforge.com/minecraft/mc-mods/infchest"
}

tasks.register("checkReleaseVersion", CallVersionCheckFunctionTask.class) {
    gameVersion = project.minecraftVersion as String
    platform = "forge"
    modName = "infchest"
    version = project.version as String
    failIfExists = true
}
